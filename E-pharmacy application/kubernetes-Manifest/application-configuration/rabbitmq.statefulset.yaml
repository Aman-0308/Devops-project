apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
spec:
  clusterIP: None  # Headless service
  selector:
    app: rabbitmq
  ports:
    - name: amqp
      port: 5672
    - name: management
      port: 15672
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  selector:
    matchLabels:
      app: rabbitmq
  serviceName: "rabbitmq"
  replicas: 1  # You can scale this to 3+ for a cluster
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: node
                    operator: In
                    values:
                      - node01
              topologyKey: "kubernetes.io/hostname"     # ensures the same node all replicas to be scheduled on (affinity).
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: topology.kubernetes.io/zone  # Ensure pods are spread across zones
                    operator: In
                    values:
                      - us-east-1a  # Make sure pods stay in the same AZ
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management  # Includes the management UI
        ports:
          - containerPort: 5672  # AMQP port
          - containerPort: 15672  # Management UI port
        env:
          - name: RABBITMQ_DEFAULT_USER
            value: admin
          - name: RABBITMQ_DEFAULT_PASS
            value: admin123
        volumeMounts:
          - name: rabbitmq-data
            mountPath: /var/lib/rabbitmq
  volumeClaimTemplates:                             #Creates a unique PVC per pod
- metadata:
    name: rabbitmq-data
  spec:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: standard
    resources:
      requests:
        storage: 1Gi
---



